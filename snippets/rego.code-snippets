{
	"Match Any": {
		"scope": "rego",
		"prefix": "match_any",
		"description": "Pattern for matching a value to any collection element",
		"body": [
			"some i",
			"${1:col}[i] ${2|==,!=|} ${3:true}\n$0"
		]
	},
	"Match All": {
		"scope": "rego",
		"prefix": "match_all",
		"description": "Pattern for matching a value to all collection elements",
		"body": [
			"invalid_values := {e | e := ${1:col}[_]; e ${2|!=,==|} ${3:true}}",
			"count(invalid_values) == 0\n$0"
		]
	},
	"Match All (preview)": {
		"scope": "rego",
		"prefix": "match_all",
		"description": "Pattern for matching a value to all collection elements",
		"body": [
			"invalid_values contains value if {",
			"\tsome value in ${1:col}",
			"\tvalue ${2|!=,==|} ${3:true}",
			"}",
			"count(invalid_values) == 0\n$0"
		]
	},
	"Function (Basic)": {
		"scope": "rego",
		"prefix": "function-basic",
		"description": "Pattern for a boolean check function with output",
		"body": [
			"default ${1:func}(_) := ${2:fail_output}",
			"$1(${3:\"good_value\"}) := ${4:pass_output}\n$0"
		]
	},
	"Function (Advanced)": {
		"scope": "rego",
		"prefix": "function-advanced",
		"description": "Pattern for an advanced function",
		"body": [
			"${1:func}(${2:input}) := ${3:pass_output} if {",
			"\t# Insert code here\n$0",
			"} else := ${4:fail_output}"
		]
	},
	"Metadata": {
		"scope": "rego",
		"prefix": "metadata",
		"description": "Rego metadata annotations",
		"body": [
			"# METADATA",
			"# scope: ${1|rule,document,package,subpackages|}",
			"# title: $2",
			"# description: $3",
			"# related_resources:\n#  - ref: https://example.com\n#    description: Example description",
			"# authors:\n#  - name: John Doe\n#    email: john@example.com",
			"# organizations: [\"org\"]",
			"# schemas:\n#  - schema_name: schema_value",
			"# entrypoint: ${4|false,true|}\n$0"
		]
	}
}
